;;; common-header-mode-line-source.el --- source of the common-header-mode-line.el.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Date: 2017/01/29 09:05:26
;; License: GPL either version 3 or any later version
;; URL: http://github.com/Bad-ptr/common-header-mode-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; Edit this file if you want to modify common-header-mode-line.el

(
 (:text
  ";;; common-$@-line.el --- common $@-line.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Version: ${version}$
;; Package-Requires: ()
;; Date: ${date-time}$
;; License: GPL either version 3 or any later version
;; Keywords: header-line, mode-line, convenience, frames, windows
;; URL: http://github.com/Bad-ptr/common-$@-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; This file is autogenerated. Do not edit manually.

;; This file is the part of the common-$@-line package

;; Draw common $@-line.

;; Install common-$@-line package, then:

;; (require 'common-$@-line)
;; (common-$@-line-mode)

;; which is equivalent to
;; (common-$0-line-mode)
;; (common-$1-line-mode)

;; which is equivalent to
;; (per-frame-$@-line-mode)
;; (per-window-$@-line-mode)

;; which is equivalent to
;; (per-frame-$0-line-mode)
;; (per-frame-$1-line-mode)
;; (per-window-$0-line-mode)
;; (per-window-$1-line-mode)

;; M-x customize-group RET common-$@-line RET
;; M-x customize-group RET common-$0-line RET
;; M-x customize-group RET common-$1-line RET

;;; Code:
")

 (defvar common-$*-line-mode nil)
 (defvar common-$@-line-mode nil)

 (defgroup common-$@-line nil
   "Customize common-$@-line."
   :prefix "common-$@-line-"
   :group 'convenience
   :link '(url-link :tag "Github page"
                    "https://github.com/Bad-ptr/common-$@-line.el"))

 (defvar common-$@-line--delayed-update-timer nil
   "Timer used to delay updates.")

 (defcustom common-$@-line-update-delay 0.5
   "Time to delay updates."
   :group 'common-$@-line
   :type 'float)


 (defadvice force-mode-line-update
     (after common-$@-line--delayed-update-adv)
   (common-$@-line--delayed-update)
   nil)

 (defun common-$@-line--activate-delayed-update-hooks ()
   (add-hook 'post-command-hook
             #'common-$@-line--delayed-update)
   (add-hook 'window-configuration-change-hook
             #'common-$@-line--delayed-update)
   (ad-activate #'force-mode-line-update))

 (defun common-$@-line--deactivate-delayed-update-hooks ()
   (remove-hook 'post-command-hook
                #'common-$@-line--delayed-update)
   (remove-hook 'window-configuration-change-hook
                #'common-$@-line--delayed-update)
   (ad-deactivate #'force-mode-line-update)
   (when (timerp common-$@-line--delayed-update-timer)
     (cancel-timer common-$@-line--delayed-update-timer)
     (setq common-$@-line--delayed-update-timer nil)))

 (defun common-$@-line-set-delayed-update-functions (funs)
   (when (and (null common-$@-line-delayed-update-functions)
              funs)
     (common-$@-line--activate-delayed-update-hooks))
   (when (null funs)
     (common-$@-line--deactivate-delayed-update-hooks))
   (setq common-$@-line-delayed-update-functions funs))

 (defcustom common-$@-line-delayed-update-functions nil
   "List of functions to call to update $@-lines."
   :group 'common-$@-line
   :type 'hook
   :set #'(lambda (sym val)
            (unless (boundp 'common-$@-line-delayed-update-functions)
              (setq common-$@-line-delayed-update-functions nil))
            (common-$@-line-set-delayed-update-functions val)
            (custom-set-default sym val)))


 (defun common-$@-line--update ()
   (run-hook-with-args-until-failure
    'common-$@-line-delayed-update-functions))

 (defun common-$@-line--delayed-update (&rest args)
   (unless (timerp common-$@-line--delayed-update-timer)
     (setq common-$@-line--delayed-update-timer
           (run-with-idle-timer
            common-$@-line-update-delay nil
            #'(lambda ()
                (unwind-protect (common-$@-line--update)
                  (setq common-$@-line--delayed-update-timer nil)))))))


 (:autoload
  (defun common-$@-line-add-delayed-update-function (fun)
    (unless (memq fun common-$@-line-delayed-update-functions)
      (common-$@-line-set-delayed-update-functions
       (cons fun common-$@-line-delayed-update-functions)))))

 (:autoload
  (defun common-$@-line-rem-delayed-update-function (fun)
    (common-$@-line-set-delayed-update-functions
     (delq fun common-$@-line-delayed-update-functions))))


 ;; (unless (boundp 'per-frame-$@-line-mode)
 ;;   (require 'per-frame-$@-line))
 ;; (unless (boundp 'per-window-$@-line-mode)
 ;;   (require 'per-window-$@-line))

 (defun common-$*-line--activate ()
   (per-frame-$*-line-mode 1)
   (per-window-$*-line-mode 1))

 (defun common-$*-line--deactivate ()
   (per-frame-$*-line-mode -1)
   (per-window-$*-line-mode -1))

 (:autoload
  (define-minor-mode common-$*-line-mode
    "`per-window-$*-line-mode' + `per-frame-$*-line-mode'"
    :require 'common-$@-line
    :group   'common-$@-line
    :init-value nil
    :global     t
    (if common-$*-line-mode
        (common-$*-line--activate)
      (common-$*-line--deactivate))))

 (:autoload
  (define-minor-mode common-$@-line-mode
    "`common-$0-line-mode' + `common-$1-line-mode'"
    :require 'common-$@-line
    :group   'common-$@-line
    :init-value nil
    :global     t
    (if common-$@-line-mode
        ($subloop
         (common-$*-line-mode 1))
      ($subloop
       (common-$*-line-mode -1)))))


 (provide 'common-$@-line)

 (:text
  "
;;; common-$@-line.el ends here")
 )
