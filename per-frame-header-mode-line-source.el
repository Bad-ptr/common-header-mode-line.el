;;; per-frame-header-mode-line-source.el --- source of the per-frame-header-mode-line.el.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Date: 2017/01/29 09:05:26
;; License: GPL either version 3 or any later version
;; URL: http://github.com/Bad-ptr/common-header-mode-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; Edit this file if you want to modify per-frame-header-mode-line.el

(
 (:text
  ";;; per-frame-$@-line.el --- per-frame $@-line.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Date: ${date-time}$
;; License: GPL either version 3 or any later version
;; URL: http://github.com/Bad-ptr/common-$@-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; This file is autogenerated. Do not edit manually.
;; This file is the part of the common-$@-line package

;; Draws per-frame $@-line.

;; To use it, first install common-$@-line package, then:

;; (require 'per-frame-$@-line)
;; (per-frame-$0-line-mode)
;; (per-frame-$1-line-mode)

;; M-x customize-group RET per-frame-header-$@-line RET
;; M-x customize-group RET per-frame-$0-line RET
;; M-x customize-group RET per-frame-$1-line RET

;;; Code:
")

 (require 'advice)
 (require 'face-remap)

 (declare-function common-$@-line-add-delayed-update-function "ext:common-$@-line" (fun))
 (declare-function common-$@-line-rem-delayed-update-function "ext:common-$@-line" (fun))


 (defvar per-frame-$*-line-mode nil)
 (defvar per-frame-$@-line-mode nil)

 ;; (unless (boundp 'common-$@-line-mode)
 ;;   (require 'common-$@-line))


 (defgroup per-frame-$@-line nil
   "Customize per-frame-$*-line."
   :prefix "per-frame-$@-line-"
   :group 'common-$@-line)

 (defvar per-frame-$@-line--selected-window nil
   "Used to track current window.")

 (defvar per-frame-$@-line--inhibit-delete-window-advice nil
   "Used to locally allow deleting $0/$1-line windows.")

 (defvar per-frame-$@-line--inhibit-window-conf-advices nil
   "Temporarily disable window-configuration advices.")

 (defcustom per-frame-$@-line-ignore-frame-functions
   (list (lambda (fr) (or (not (frame-live-p fr))
                     (not (frame-visible-p fr))
                     (and (fboundp 'daemonp) (daemonp)
                          (eq fr terminal-frame))
                     (frame-parameter fr 'per-frame-$@-line-ignore)))
         (lambda (fr) (and (featurep 'posframe)
                      (or (frame-parameter fr 'posframe-buffer)
                          (frame-parameter fr 'posframe-parent-buffer)
                          (string= "posframe" (frame-parameter fr 'title))))))
   "Ignore frame(argument) if one of these functions return non nil."
   :group 'per-frame-$@-line
   :type '(repeat function))

 (defcustom per-frame-$@-line-ignore-window-functions
   (list (lambda (win) (or (not (window-live-p win))
                      (window-parameter win 'per-frame-$@-line-ignore)
                      (eq win (window-main-window (window-frame win)))
                      (and (featurep 'transient)
                           transient--showp
                           (eq win transient--window)))))
   "Sometimes Emacs/package reuses our window(argument). We need to respect that.
If one of these return non nil -- do not touch that window."
   :group 'per-frame-$@-line
   :type '(repeat function))

 (defvar per-frame-$@-line--apply-with-no-emacs-window-hooks
   (lambda (fun &rest args) (apply fun args))
   "Generated function to run with let-nilled emacs window hooks.")

 (defcustom per-frame-$@-line-emacs-window-hooks-to-inhibit
   (list 'window-configuration-change-hook
         'window-state-change-hook
         'window-state-change-functions
         'window-buffer-change-functions
         'window-size-change-functions)
   "These hooks will be let-nil'd in `per-frame-$@-line--apply-with-no-emacs-window-hooks'
while manipulating $0/$1-line windows."
   :group 'per-frame-$@-line
   :type '(repeat symbol)
   :set (lambda (sym val)
          (custom-set-default sym val)
          (setq per-frame-$@-line--apply-with-no-emacs-window-hooks
                (byte-compile
                 `(lambda (fun &rest args)
                    (let ,per-frame-$@-line-emacs-window-hooks-to-inhibit
                      (apply fun args)))))))

 (defcustom per-frame-$@-line-advices (list #'window-state-get)
   "List of functions to activate around advices."
   :group 'per-frame-$@-line
   :type '(repeat symbol)
   :set (lambda (sym val)
          (let ((reactivatep
                 (and (fboundp 'per-frame-$@-line--de/activate-advices)
                      ($car-> progn or ($subforms per-frame-$*-line-mode)))))
            (when reactivatep
              (per-frame-$@-line--de/activate-advices))
            (custom-set-default sym val)
            (when reactivatep
              (per-frame-$@-line--de/activate-advices t)))))


 (defgroup per-frame-$*-line nil
   "Customize per-frame-$*-line."
   :prefix "per-frame-$*-line-"
   :group 'per-frame-$@-line)

 (defcustom per-frame-$*-line-display-type nil
   "How to draw per-frame-$*-line."
   :group 'per-frame-$*-line
   :type '(choice
           (const :tag "Use ordinary window" :value nil)
           (const :tag "Use side window" :value side-window)
           (function :tag "Use this function to get or create a display for $*-line"
                     :value (lambda () nil)))
   :set (lambda (sym val)
          (custom-set-default sym val)
          (when per-frame-$*-line-mode
            (when (fboundp 'per-frame-$*-line-regenerate-display-buffer-alist-entry)
              (per-frame-$*-line-regenerate-display-buffer-alist-entry))
            (when (fboundp 'per-frame-$*-line--recreate-display)
              (per-frame-$*-line--recreate-display)))))

 (defcustom per-frame-$*-line-window-side
   ($eval
    (pcase '$*
      ('mode ''bottom)
      (_ ''top)))
   "Side of the frame where $*-line will be displayed."
   :group 'per-frame-$*-line
   :type '(choice
           (const :tag "At the bottom" :value bottom)
           (const :tag "At the top" :value top))
   :set (lambda (sym val)
          (custom-set-default sym val)
          (when per-frame-$*-line-mode
            (when (fboundp 'per-frame-$*-line-regenerate-display-buffer-alist-entry)
              (per-frame-$*-line-regenerate-display-buffer-alist-entry))
            (when (fboundp 'per-frame-$*-line--recreate-display)
              (per-frame-$*-line--recreate-display)))))

 (defcustom per-frame-$*-line-window-slot
   (pcase per-frame-$*-line-window-side
     ('bottom 10)
     (_ -10))
   "Slot to use for side window."
   :group 'per-frame-$*-line
   :type '(choice
           (const :tag "Middle slot" :value nil)
           (iteger :tag "See doc for `display-buffer-in-side-window'"
                   :value 0))
   :set (lambda (sym val)
          (custom-set-default sym val)
          (when per-frame-$*-line-mode
            (when (fboundp 'per-frame-$*-line-regenerate-display-buffer-alist-entry)
              (per-frame-$*-line-regenerate-display-buffer-alist-entry))
            (when (fboundp 'per-frame-$*-line--recreate-display)
              (per-frame-$*-line--recreate-display)))))


 (defvar per-frame-$*-line--buffer nil
   "Buffer used to display $*-line.")

 (defcustom per-frame-$*-line-buffer-name " *per-frame-$*-line*"
   "Name of the buffer used to display $*-line."
   :group 'per-frame-$*-line
   :type 'string
   :set (lambda (sym val)
          (custom-set-default sym val)
          (when per-frame-$*-line-mode
            (when (fboundp 'per-frame-$*-line-regenerate-display-buffer-alist-entry)
              (per-frame-$*-line-regenerate-display-buffer-alist-entry))
            (when (buffer-live-p per-frame-$*-line--buffer)
              (with-current-buffer per-frame-$*-line--buffer
                (rename-buffer val))))))

 (defvar per-frame-$*-line-display-buffer-alist-entry)

 (defun per-frame-$*-line-regenerate-display-buffer-alist-entry (&optional remove)
   (setq display-buffer-alist
         (delq per-frame-$*-line-display-buffer-alist-entry
               display-buffer-alist))
   (if remove
       (setq per-frame-$*-line-display-buffer-alist-entry nil)
     (setq per-frame-$*-line-display-buffer-alist-entry
           `(,(regexp-quote per-frame-$*-line-buffer-name)
             #'display-buffer-in-side-window
             (side . ,per-frame-$*-line-window-side) (slot . ,per-frame-$*-line-window-slot)
             (window-height . fit-window-to-buffer) ; (window-height . ,window-safe-min-height)
             (preserve-size . (nil . t)) (allow-no-window . t)
             (dedicated . t) (bump-use-time . t) (inhibit-same-window . t)
             (window-parameters . ((no-other-window . t)
                                   (no-delete-other-windows . t)))))
     (add-to-list 'display-buffer-alist
                  per-frame-$*-line-display-buffer-alist-entry))
   per-frame-$*-line-display-buffer-alist-entry)

 (defvar per-frame-$*-line-display-buffer-alist-entry nil
   "Element for the `display-buffer-alist'.")

 (per-frame-$*-line-regenerate-display-buffer-alist-entry)

 (defcustom per-frame-$*-line-get-create-display-function
   #'per-frame-$*-line--get-create-display-function
   "Function to create display. Optional argument -- frame."
   :group 'per-frame-$*-line
   :type 'function
   :set (lambda (sym val)
          (custom-set-default sym val)
          (when per-frame-$*-line-mode
            (when (fboundp 'per-frame-$*-line--recreate-display)
              (per-frame-$*-line--recreate-display)))))

 (defcustom per-frame-$*-line-update-display-function
   #'per-frame-$*-line--update-display-function
   "Function to update display. Display is the argument."
   :group 'per-frame-$*-line
   :type 'function)

 (defcustom per-frame-$*-line-kill-display-function
   #'per-frame-$*-line--kill-display-function
   "Function to kill display passed as argument."
   :group 'per-frame-$*-line
   :type 'function)


 (defface per-frame-$*-line-face
   '((default :inherit $*-line))
   "Face for common $*-line."
   :group 'per-frame-$*-line)


 (defun per-frame-$*-line-get-window (&optional frame display)
   (unless display
     (setq display (per-frame-$*-line--get-create-display frame)))
   (when display
     (cdr (assq 'win display))))

 (defun per-frame-$*-line-set-window (&optional win frame display)
   (unless display
     (setq display (per-frame-$*-line--get-create-display frame)))
   (when display
     (let* ((winc (assq 'win display))
            (oldwin (cdr winc)))
       (when win
         (set-window-parameter win 'per-frame-$*-line-window t))
       (when oldwin
         (set-window-parameter oldwin 'per-frame-$*-line-window nil))
       (setcdr winc win))))

 (defun per-frame-$@-line--apply-with-no-emacs-window-hooks (fun &rest args)
   (apply per-frame-$@-line--apply-with-no-emacs-window-hooks fun args))

 (defmacro per-frame-$@-line-with-no-emacs-window-hooks (vars &rest body)
   (declare (indent 1))
   `(apply per-frame-$@-line--apply-with-no-emacs-window-hooks
           (lambda ,(butlast vars) ,@body) ,@vars))

 (defun per-frame-$@-line-frame-list ()
   (filtered-frame-list (lambda (fr)
                          (not
                           (run-hook-with-args-until-success
                            'per-frame-$@-line-ignore-frame-functions fr)))))

 (defun per-frame-$@-line--init-buffer (b)
   (with-current-buffer b
     ;; (fundamental-mode)
     (jit-lock-mode nil)
     (font-lock-mode -1)
     (buffer-disable-undo)
     ;; (toggle-truncate-lines 1)
     ($subforms
      (setq-local $*-line-format nil))
     (setq-local
      ;; window-size-fixed t
      cursor-type nil
      cursor-in-non-selected-windows nil
      ;; left-fringe-width 0
      ;; right-fringe-width 0
      overflow-newline-into-fringe nil
      word-wrap nil
      ;; scroll-bar-mode nil
      show-trailing-whitespace nil)
     )
   b)

 (defun per-frame-$*-line--get-create-buffer ()
   (if (buffer-live-p per-frame-$*-line--buffer)
       per-frame-$*-line--buffer
     (setq per-frame-$*-line--buffer
           (per-frame-$@-line--init-buffer
            (get-buffer-create per-frame-$*-line-buffer-name)))
     (with-current-buffer per-frame-$*-line--buffer
       ;; (buffer-face-set 'per-frame-$*-line-face)
       (face-remap-add-relative 'default 'per-frame-$*-line-face))
     per-frame-$*-line--buffer))

 (defun per-frame-$*-line--kill-buffer (&optional buf)
   (unless buf
     (setq buf per-frame-$*-line--buffer))
   (when (buffer-live-p buf)
     (per-frame-$@-line--apply-with-no-emacs-window-hooks
      #'kill-buffer buf)))

 (defun per-frame-$*-line--recreate-buffer ()
   (per-frame-$*-line--kill-buffer)
   (per-frame-$*-line--get-create-buffer))

 (defun per-frame-$@-line--fit-window-to-buffer (win &optional width-or-height shrink-or-grow win-to-resize)
   (unless win-to-resize (setq win-to-resize win))
   (let ((window-resize-pixelwise t)
         (frame (window-frame win))
         win-size buf-size min-size delta-size)
     (pcase width-or-height
       ((or 'height 'nil) (setq win-size (window-body-size win nil window-resize-pixelwise)
                                buf-size (+ (cdr (window-text-pixel-size
                                                  win nil t nil (frame-pixel-height frame) t t))
                                            (window-scroll-bar-height win)
                                            (window-bottom-divider-width win))
                                min-size ;; (* window-safe-min-height (window-default-line-height win))
                                (window-safe-min-pixel-height win)))
       ((or 'width 't) (setq win-size (window-body-size win t window-resize-pixelwise)
                             buf-size (+ (car (window-text-pixel-size
                                               win (window-start win) nil
                                               (frame-pixel-width frame)
                                               (window-body-height win window-resize-pixelwise)))
                                         (- win-size
                                            (window-body-width win window-resize-pixelwise)))
                             min-size ;; (* window-safe-min-width (frame-char-width frame))
                             (window-safe-min-pixel-width win))))
     (setq delta-size (- buf-size win-size)
           win-size (+ win-size delta-size))
     (when (> min-size win-size)
       (setq delta-size (+ delta-size (- min-size win-size))))
     (and
      (/= 0 delta-size)
      (if (> 0 delta-size) (< 0 win-size) t)
      (pcase shrink-or-grow
        ('grow   (> delta-size 0))
        ('shrink (< delta-size 0))
        (_ t))
      (window-resize win-to-resize delta-size (eq width-or-height 'width) 'safe window-resize-pixelwise))))

 (defun per-frame-$@-line--swap-windows (win-left win-right)
   (let ((left-buf (window-buffer win-left))
         (left-start (window-start win-left))
         (left-point (window-point win-left))
         (left-parameters (copy-tree (window-parameters win-left)))
         (right-buf (window-buffer win-right))
         (right-start (window-start win-right))
         (right-point (window-point win-right))
         (right-parameters (copy-tree (window-parameters win-right)))
         (frame (window-frame win-left)))
     (mapc (lambda (wpc) (set-window-parameter win-left (car wpc) nil))
           left-parameters)
     (mapc (lambda (wpc) (set-window-parameter win-right (car wpc) nil))
           right-parameters)
     (set-window-buffer-start-and-point win-left right-buf right-start right-point)
     (set-window-buffer-start-and-point win-right left-buf left-start left-point)
     (mapc (lambda (wpc) (set-window-parameter win-right (car wpc) (cdr wpc)))
           left-parameters)
     (mapc (lambda (wpc) (set-window-parameter win-left (car wpc) (cdr wpc)))
           right-parameters)
     (let (hml-win)
       ($subforms
        (progn
          (setq hml-win (per-frame-$*-line-get-window frame))
          (per-frame-$*-line-set-window
           (cond ((eq hml-win win-left)  win-right)
                 ((eq hml-win win-right) win-left)
                 (t hml-win))
           frame)))))
   (list win-right win-left))

 (defun per-frame-$@-line--window-split-window-parameter-function (win size side &rest args)
   (let* ((window-combination-resize 'side)
          (win-buf (window-buffer win))
          (win-side (window-parameter win 'window-side))
          (new-side (pcase win-side
                      ((or 'left 'right) 'above)
                      (_ 'left)))
          nwin)
     (setf (buffer-local-value 'window-size-fixed win-buf) nil)
     (window-preserve-size win nil nil)
     (let* ((pos-win (or (get-mru-window nil t (eq win (selected-window)))
                         (selected-window)))
            (pnt-pos (max 1 (+ (window-left-column pos-win)
                               (with-selected-window pos-win
                                 (current-column)))))
            (tmp-swp-win win))
       (setq nwin (let ((ignore-window-parameters t))
                    (split-window win size new-side)))
       (when (> 2 (/ (frame-width) pnt-pos))
         (per-frame-$@-line--swap-windows win nwin)
         ;; (window-swap-states win nwin)
         (setq win nwin nwin tmp-swp-win)))
     (per-frame-$@-line--fit-window-to-buffer win 'width 'shrink)
     (run-at-time 1 nil (lambda (win nwin)
                          (when (and (window-live-p win) (window-live-p nwin))
                            ;; (per-frame-$@-line--fit-window-to-buffer nwin 'width 'grow nwin)
                            (per-frame-$@-line--fit-window-to-buffer nwin 'height 'grow nwin)))
                  win nwin)
     nwin))

 (defun per-frame-$@-line--init-window-with-buffer (win buf)
   (set-window-parameter win 'no-other-window t)
   (set-window-parameter win 'no-delete-other-windows t)
   (set-window-parameter win 'window-preserved-size nil)
   (set-window-parameter win 'quit-restore nil)
   (set-window-parameter win 'split-window #'per-frame-$@-line--window-split-window-parameter-function)
   (per-frame-$@-line-with-no-emacs-window-hooks
    (()) ;; (win buf ())
    (set-window-margins win 0 0)
    (set-window-fringes win 0 0)
    (set-window-scroll-bars win 0 nil 0 nil)
    (set-window-dedicated-p win nil)
    (set-window-buffer-start-and-point win buf 1 1)
    (setf (buffer-local-value 'window-size-fixed buf) nil)
    (window-preserve-size win nil nil)
    (let ((win-side (window-parameter win 'window-side)))
      (if (or (window-combined-p win t)
              (window-in-direction 'left  win t 1  nil 0)
              (window-in-direction 'right win t -1 nil 0)
              (and win-side
                   (cdr (window-at-side-list (window-frame win) win-side))))
          ;; (progn
          ;;   (let ((fit-window-to-buffer-horizontally t)
          ;;         (ignore-window-parameters t)
          ;;         (window-resize-pixelwise t))
          ;;     (per-frame-$@-line--fit-window-to-buffer win 'width 'shrink)
          ;;     (set-window-dedicated-p win t)
          ;;     (setf (buffer-local-value 'window-size-fixed buf) 'width)
          ;;     ;; (window-preserve-size win nil t)
          ;;     (window-preserve-size win t t)))
          nil
        (unwind-protect
            (condition-case err
                (per-frame-$@-line--fit-window-to-buffer win 'height)
              (error
               (message "[common-$@-line] Error: per-frame-$@-line--init-window-with-buffer -- %S"
                        err)))
          (set-window-dedicated-p win (if win-side 'side t))
          (setf (buffer-local-value 'window-size-fixed buf) ;; 'height
                t)
          (window-preserve-size win nil t))))
    ;; (minimize-window win)
    win)
   win)

 (defun per-frame-$*-line--create-window-1 (&optional frame buf)
   (unless frame (setq frame (selected-frame)))
   (per-frame-$@-line-with-no-emacs-window-hooks
    (()) ;; (frame buf ())
    (let (win)
      (with-selected-frame frame
        (setq win
              (let (;; (ignore-window-parameters t)
                    (split-width-threshold 2)
                    (split-height-threshold 2)
                    (window-min-height window-safe-min-height)
                    (window-min-width window-safe-min-width)
                    (window-resize-pixelwise t)
                    (buf-display-params (cddr per-frame-$*-line-display-buffer-alist-entry)))
                (if per-frame-$*-line-display-type
                    (let ((display-buffer-mark-dedicated t))
                      (display-buffer-in-side-window
                       (or buf (current-buffer))
                       buf-display-params))
                  (let ((nwin (split-window (frame-root-window frame) -1
                                            (if (eq 'bottom per-frame-$*-line-window-side)
                                                'below 'above)))
                        (wps (cdr (assq 'window-parameters buf-display-params))))
                    (mapc (lambda (wpc) (set-window-parameter nwin (car wpc) (cdr wpc)))
                          wps)
                    (set-window-buffer nwin buf)
                    nwin)))))
      win)))

 (defun per-frame-$*-line--create-window (&optional frame display)
   (let* ((buf (per-frame-$*-line--get-create-buffer))
          (win (per-frame-$*-line--create-window-1 frame buf)))
     (per-frame-$*-line-set-window win frame display)
     (per-frame-$@-line--init-window-with-buffer win buf)
     win))

 (defun per-frame-$*-line--get-create-window (&optional frame display)
   (let ((win (per-frame-$*-line-get-window frame display)))
     (unless (window-live-p win)
       (setq win (window-with-parameter 'per-frame-$*-line-window t frame))
       (per-frame-$*-line-set-window win frame display))
     (unless (window-live-p win)
       (setq win (per-frame-$*-line--create-window frame display)))
     win))

 (defun per-frame-$*-line--giveup-window (win &optional frame)
   (setq frame (or frame (window-frame win)))
   (set-window-dedicated-p win nil)
   (mapc (lambda (wptn)
           (set-window-parameter win wptn nil))
         '(no-other-window
           no-delete-other-windows
           window-preserved-size
           quit-restore-window
           split-window
           per-frame-$*-line-window))
   (per-frame-$*-line-set-window nil frame))

 (defun per-frame-$*-line--check-fix-window (&optional frame)
   (let ((win (per-frame-$*-line-get-window frame)))
     (if (run-hook-with-args-until-success
          'per-frame-$@-line-ignore-window-functions win)
         (progn
           (per-frame-$*-line--giveup-window win frame)
           (setq win (per-frame-$*-line--create-window frame)))
       (per-frame-$@-line--init-window-with-buffer
        win (per-frame-$*-line--get-create-buffer)))
     win))

 (defun per-frame-$*-line--kill-window (&optional frame win)
   (setq win (or (and (window-live-p win) win)
                 (per-frame-$*-line-get-window frame)))
   (when (window-live-p win)
     (per-frame-$@-line-with-no-emacs-window-hooks
      (()) ;; (win ())
      (set-window-dedicated-p win nil)
      (let ((per-frame-$@-line--inhibit-delete-window-advice t)
            need-to-delete)
        (setq need-to-delete
              (condition-case _err
                  (delete-window win)
                (error t)))
        (when need-to-delete
          (let ((ignore-window-parameters t)
                (window--sides-inhibit-check t))
            (condition-case err
                (delete-window win)
              (error
               (message "[common-$@-line] Error: per-frame-$*-line--kill-window -- %S"
                        err))))))))
   (per-frame-$*-line-set-window nil frame))


 (defun per-frame-$*-line--kill-display-function (display)
   (when display
     (let ((winc (assq 'win display))
           (bufc (assq 'buf display))
           (frame (cdr (assq 'frame display))))
       (per-frame-$*-line--kill-window frame (cdr winc))
       (per-frame-$*-line--kill-buffer (cdr bufc))
       (setcdr winc nil)
       (setcdr bufc nil)
       (set-frame-parameter frame 'per-frame-$*-line-display
                            nil)
       display)))

 (defun per-frame-$*-line--kill-display (display)
   (funcall per-frame-$*-line-kill-display-function display))

 (defun per-frame-$*-line--recreate-display (&optional frames)
   (if frames
       (unless (listp frames) (setq frames (list frames)))
     (setq frames (per-frame-$@-line-frame-list)))
   (dolist (frame frames)
     (per-frame-$*-line--kill-display
      (frame-parameter frame 'per-frame-$*-line-display))
     (per-frame-$*-line--get-create-display frame)))

 (defun per-frame-$*-line--display-valid-p (display)
   (let ((win (cdr (assq 'win display)))
         (buf (cdr (assq 'buf display))))
     (and (window-live-p win) (buffer-live-p buf))))

 (defun per-frame-$*-line--get-create-display-function (&optional frame)
   (unless frame (setq frame (selected-frame)))
   (let ((display (frame-parameter frame 'per-frame-$*-line-display)))
     (if (per-frame-$*-line--display-valid-p display)
         display
       (unless (run-hook-with-args-until-success
                'per-frame-$@-line-ignore-frame-functions frame)
         (let* ((bufc (cons 'buf nil))
                (winc (cons 'win nil))
                (framec (cons 'frame frame))
                (display (cons bufc
                               (cons winc
                                     (cons framec
                                           nil)))))
           (set-frame-parameter frame 'per-frame-$*-line-display
                                display)
           (setcdr bufc (per-frame-$*-line--get-create-buffer))
           (setcdr winc (per-frame-$*-line--get-create-window frame display))
           display)))))

 (defun per-frame-$*-line--get-create-display (&optional frame)
   (funcall per-frame-$*-line-get-create-display-function frame))

 (defun per-frame-$*-line--update-display-function (display)
   (let ((buf (cdr (assq 'buf display))))
     (with-current-buffer buf
       (setq-local buffer-read-only nil)
       (erase-buffer)
       (let* (($*-l-str
               (format-mode-line
                ($eval
                 (if (eq 'mode '$*)
                     `(list "" '(eldoc-mode-line-string
                                 (" " eldoc-mode-line-string " "))
                            (default-value 'mode-line-format))
                   `(default-value '$*-line-format)))
                'per-frame-$*-line-face
                per-frame-$@-line--selected-window))
              ;; (win (cdr (assq 'win display)))
              ;; (win-w (window-width win))
              ;; (fill-w (max 0 (- win-w (string-width $*-l-str))))
              )
         (insert
          ;; (concat $*-l-str (propertize (make-string fill-w ?\ )
          ;;                              'face 'per-frame-$*-line-face))
          $*-l-str))
       ($subforms
        (setq-local $*-line-format nil))
       (goto-char (point-min))
       (setq-local buffer-read-only t))))

 (defun per-frame-$*-line--update-display (display)
   (funcall per-frame-$*-line-update-display-function display))

 (defun per-frame-$*-line--check-fix-display (display)
   (let ((bufc (assq 'buf display))
         (winc (assq 'win display))
         (frame (cdr (assq 'frame display))))
     (setf (cdr bufc) (per-frame-$*-line--get-create-buffer)
           (cdr winc) (per-frame-$*-line--check-fix-window frame)))
   display)

 (defun per-frame-$*-line--update (&optional frame &rest args)
   (let ((display (per-frame-$*-line--get-create-display frame)))
     (when display
       (per-frame-$*-line--check-fix-display display)
       (let ((win (cdr (assq 'win display)))
             (cwin (selected-window)))
         (unless (eq win cwin)
           (setq per-frame-$@-line--selected-window
                 (if (minibuffer-window-active-p cwin)
                     (minibuffer-selected-window)
                   cwin))))
       (per-frame-$*-line--update-display display))))

 (defun per-frame-$@-line--update (&rest args)
   ($subforms
    (when per-frame-$*-line-mode
      (apply #'per-frame-$*-line--update (selected-frame) args)))
   t)

 (defun per-frame-$*-line--display-buffer-p (b)
   (eq b per-frame-$*-line--buffer))

 (defun per-frame-$@-line--sleep ()
   (common-$@-line-rem-delayed-update-function
    #'per-frame-$@-line--update)
   (setq per-frame-$@-line--inhibit-delete-window-advice t
         per-frame-$@-line--inhibit-window-conf-advices t))

 (defun per-frame-$@-line--wake ()
   (common-$@-line-add-delayed-update-function
    #'per-frame-$@-line--update)
   (setq per-frame-$@-line--inhibit-delete-window-advice nil
         per-frame-$@-line--inhibit-window-conf-advices nil))

(defun per-frame-$*-line--init-new-frame (frame)
   (unless (run-hook-with-args-until-success
            'per-frame-$@-line-ignore-frame-functions frame)
     (per-frame-$*-line--get-create-display frame)))

 (defun per-frame-$@-line--can-delete-window-p (win &optional frame)
   (unless frame (setq frame (window-frame win)))
   (if (or per-frame-$0-line-mode per-frame-$1-line-mode)
       (not
        (or (window-parameter win 'per-frame-$0-line-window)
            (window-parameter win 'per-frame-$1-line-window)
            (< (length (window-list frame 0 win)) 3)))
     t))

 (defmacro with-suspended-per-frame-$@-line (&rest body)
   `(progn
      (per-frame-$@-line--sleep)
      (unwind-protect
          (progn ,@body)
        (per-frame-$@-line--wake))))


 (defadvice delete-window
     (around per-frame-$@-line--delete-window-adv)
   (let ((win (or (ad-get-arg 0) (selected-window))))
     (if (and (not per-frame-$@-line--inhibit-delete-window-advice)
              (not (per-frame-$@-line--can-delete-window-p win)))
         (progn
           (message "[common-$@-line] Error: Deletion of $0/$1-line window is not allowed.")
           nil)
       ad-do-it)))

 (defadvice current-window-configuration
     (around per-frame-$@-line--current-window-configuration-adv)
   (if (and (or per-frame-$0-line-mode per-frame-$1-line-mode)
            (not per-frame-$@-line--inhibit-window-conf-advices))
       (with-suspended-per-frame-$@-line
        (per-frame-$@-line--apply-with-no-emacs-window-hooks
         (lambda (frame)
           ($subforms
            (per-frame-$*-line--kill-display
             (frame-parameter frame 'per-frame-$*-line-display))))
         (or (ad-get-arg 0) (selected-frame)))
        ad-do-it)
     ad-do-it))

 ($cons progn
        ($varloop
         (get/put ("get" "put"))
         (defadvice window-state-${get/put}$
             (around per-frame-$@-line--window-state-${get/put}$-adv)
           (if (and (or per-frame-$0-line-mode per-frame-$1-line-mode)
                    (not per-frame-$@-line--inhibit-window-conf-advices))
               (let* ((win (ad-get-arg
                            ($eval (if (eq '${get/put}$ 'get) 0 1))))
                      (frame (window-frame win))
                      ourwin-p)
                 ($subforms
                  (when (eq win (per-frame-$*-line-get-window frame))
                    (setq ourwin-p t)))
                 (with-suspended-per-frame-$@-line
                  (if ourwin-p
                      ad-do-it
                    (let ((root-win-p (eq win (frame-root-window frame))))
                      (per-frame-$@-line-with-no-emacs-window-hooks
                       (()) ;; (frame ())
                       ($subforms
                        (per-frame-$*-line--kill-display
                         (frame-parameter frame 'per-frame-$*-line-display))))
                      (when (and root-win-p (not (window-live-p win)))
                        (setq win (frame-root-window frame))
                        (ad-set-arg
                         ($eval (if (eq '${get/put}$ 'get) 0 1))
                         win))
                      ad-do-it))))
             ad-do-it))))


 (defun per-frame-$@-line--de/activate-advices (&optional activatep)
   (mapc (lambda (funsym)
           (let ((adv-sym (intern (concat "per-frame-$@-line--"
                                          (symbol-name funsym)
                                          "-adv"))))
             (if activatep
                 (ad-enable-advice funsym 'around adv-sym)
               (ad-disable-advice funsym 'around adv-sym)))
           (ad-activate funsym))
         per-frame-$@-line-advices))

 (defun per-frame-$*-line--activate (&optional frames)
   (unless (and frames (listp frames))
     (setq frames (per-frame-$@-line-frame-list)))

   (per-frame-$*-line-regenerate-display-buffer-alist-entry)

   (dolist (frame frames)
     (per-frame-$*-line--get-create-display frame))

   ;; (setq default-frame-alist '((right-divider-width . 4)
   ;;                             (bottom-divider-width . 4)))

   (add-to-list 'window-persistent-parameters
                '(per-frame-$*-line-window . writable))
   (add-to-list 'window-persistent-parameters
                '(no-other-window . writable))
   (add-to-list 'window-persistent-parameters
                '(no-delete-other-windows . writable))

   (per-frame-$@-line--de/activate-advices t)

   (add-hook 'per-window-$@-line-ignore-buffer-functions
             #'per-frame-$*-line--display-buffer-p)
   (add-hook 'after-make-frame-functions
             #'per-frame-$*-line--init-new-frame)
   (per-frame-$@-line--wake))

 (defun per-frame-$*-line--deactivate (&optional frames)
   (per-frame-$@-line--sleep)
   (let (all-frames win all)
     (unless (and frames (listp frames))
       (setq frames (per-frame-$@-line-frame-list)
             all-frames t))
     (dolist (frame frames)
       (per-frame-$*-line--kill-display
        (frame-parameter frame 'per-frame-$*-line-display)))
     (unless (window-with-parameter 'per-frame-$*-line-window t)
       (setq all-frames t))
     (if all-frames
         (progn
           (unless (or per-frame-$0-line-mode per-frame-$1-line-mode)
             (per-frame-$@-line--de/activate-advices))
           (remove-hook 'per-window-$@-line-ignore-buffer-functions
                        #'per-frame-$*-line--display-buffer-p)
           (remove-hook 'after-make-frame-functions
                        #'per-frame-$*-line--init-new-frame)
           (per-frame-$*-line-regenerate-display-buffer-alist-entry t))
       (per-frame-$@-line--wake))))


 (:autoload
  (define-minor-mode per-frame-$*-line-mode
    "Toggle the `per-frame-$*-line-mode'.
When active it draws a `$*-line' at the bottom(or top) of
the frame."
    :require 'per-frame-$@-line
    :group   'per-frame-$*-line
    :init-value nil
    :global     t
    (if per-frame-$*-line-mode
        (per-frame-$*-line--activate)
      (per-frame-$*-line--deactivate))))

 (:autoload
  (define-minor-mode per-frame-$@-line-mode
    "`per-frame-$0-line-mode' + `per-frame-$1-line-mode'."
    :require 'per-frame-$@-line
    :group   'per-frame-$@-line
    :init-value nil
    :global     t
    (if per-frame-$@-line-mode
        ($subforms
         (per-frame-$*-line-mode 1))
      ($subforms
       (per-frame-$*-line-mode -1)))))

 (provide 'per-frame-$@-line)

 (:text
  "
;;; per-frame-$@-line.el ends here")
 )
