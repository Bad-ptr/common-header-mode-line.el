;;; per-frame-header-mode-line-source.el --- source of the per-frame-header-mode-line.el.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Date: 2017/01/29 09:05:26
;; License: GPL either version 3 or any later version
;; X-URL: http://github.com/Bad-ptr/common-header-mode-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; Edit this file if you want to modify per-frame-header-mode-line.el

(
 (:text
  ";;; per-frame-$@-line.el --- per-frame $@-line.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Date: ${date-time}$
;; License: GPL either version 3 or any later version
;; X-URL: http://github.com/Bad-ptr/common-$@-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; This file is autogenerated. Do not edit manually.
;; This file is the part of the common-$@-line package

;; Draws per-frame $@-line.

;; To use it, first install common-$@-line package, then:

;; (require 'per-frame-$@-line)
;; (per-frame-$0-line-mode)
;; (per-frame-$1-line-mode)

;; M-x customize-group RET per-frame-header-$@-line RET
;; M-x customize-group RET per-frame-$0-line RET
;; M-x customize-group RET per-frame-$1-line RET

;;; Code:
")

 (defvar per-frame-$*-line-mode nil)
 (defvar per-frame-$@-line-mode nil)

 ;; (unless (boundp 'common-$@-line-mode)
 ;;   (require 'common-$@-line))


 (defgroup per-frame-$@-line nil
   "Customize per-frame-$*-line."
   :prefix "per-frame-$@-line-"
   :group 'common-$@-line)

 (defvar per-frame-$@-line--selected-window nil
   "Used to track current window.")

 (defvar per-frame-$@-line--inhibit-delete-window-advice nil
   "Used to locally allow deleting any window.")


 (defgroup per-frame-$*-line nil
   "Customize per-frame-$*-line."
   :prefix "per-frame-$*-line-"
   :group 'per-frame-$@-line)

 (defcustom per-frame-$*-line-display-type nil
   "How to draw per-frame-$*-line."
   :group 'per-frame-$*-line
   :type '(choice
           (const :tag "Use ordinary window" :value nil)
           (const :tag "Use side window" :value side-window)
           (function :tag "Use this function to get or create a display for $*-line"
                     :value (lambda () nil))))

 (defcustom per-frame-$*-line-window-side
   ($eval
    (cond
     ((eq '$1 '$*) ''bottom)
     (t ''top)))
   "Side of the frame where $*-line will be displayed."
   :group 'per-frame-$*-line
   :type '(choice
           (const :tag "At the bottom" :value bottom)
           (const :tag "At the top" :value top)))

 (defcustom per-frame-$*-line-window-slot
   (cond
    ((eq 'bottom per-frame-$*-line-window-side) 1)
    (t -1))
   "Slot to use for side window."
   :group 'per-frame-$*-line
   :type '(choice
           (const :tag "Middle slot" :value nil)
           (iteger :tag "See doc for `display-buffer-in-side-window'"
                   :value 0)))


 (defvar per-frame-$*-line--buffer nil
   "Buffer used to display $*-line.")

 (defcustom per-frame-$*-line-buffer-name " *per-frame-$*-line*"
   "Name of the buffer used to display $*-line."
   :group 'per-frame-$*-line
   :type 'string
   :set #'(lambda (sym val)
            (custom-set-default sym val)
            (when (buffer-live-p per-frame-$*-line--buffer)
              (with-current-buffer per-frame-$*-line--buffer
                (rename-buffer val)))))


 (defcustom per-frame-$*-line-get-create-display-function
   #'per-frame-$*-line--get-create-display-function
   "Function to create display. Optional argument -- frame."
   :group 'per-frame-$*-line
   :type 'function)

 (defcustom per-frame-$*-line-update-display-function
   #'per-frame-$*-line--update-display-function
   "Function to update display. Display is the argument."
   :group 'per-frame-$*-line
   :type 'function)

 (defcustom per-frame-$*-line-kill-display-function
   #'per-frame-$*-line--kill-display-function
   "Function to kill display passed as argument."
   :group 'per-frame-$*-line
   :type 'function)


 (defface per-frame-$*-line-face
   '((default :inherit $*-line))
   "Face for common $*-line."
   :group 'per-frame-$*-line)


 (defun per-frame-$@-line--init-buffer (b)
   (with-current-buffer b
     ;; (fundamental-mode)
     (jit-lock-mode nil)
     (font-lock-mode -1)
     (buffer-disable-undo)
     ($subloop
      (setq-local $*-line-format nil))
     (setq-local cursor-type nil)
     (setq-local cursor-in-non-selected-windows nil)
     (setq-local left-fringe-width 0)
     (setq-local right-fringe-width 0)
     (setq-local overflow-newline-into-fringe nil)
     (setq-local word-wrap nil)
     (setq-local show-trailing-whitespace nil)
     (toggle-truncate-lines 1)
     (current-buffer)))

 (defun per-frame-$*-line--get-create-buffer ()
   (if (buffer-live-p per-frame-$*-line--buffer)
       per-frame-$*-line--buffer
     (setq per-frame-$*-line--buffer
           (per-frame-$@-line--init-buffer
            (with-current-buffer
                (get-buffer-create per-frame-$*-line-buffer-name)
              (face-remap-add-relative 'default 'per-frame-$*-line-face)
              (current-buffer))))))

 (defun per-frame-$*-line--kill-buffer (&optional buf)
   (unless buf
     (setq buf per-frame-$*-line--buffer))
   (when (buffer-live-p buf)
     (kill-buffer buf)))


 (defun per-frame-$@-line--init-window-with-buffer (win buf)
   (with-selected-window win
     (with-current-buffer buf
       (set-window-buffer win buf)
       (set-window-dedicated-p win t)
       (set-window-parameter win 'no-other-window t)
       (setq-local window-min-height 1)
       (setq-local window-safe-min-height 1)
       (setq-local window-size-fixed nil)
       (fit-window-to-buffer win 1 1)
       (when (fboundp 'window-preserve-size)
         (window-preserve-size win nil t))
       ;; (shrink-window-if-larger-than-buffer)
       ;; (window-preserve-size win nil t)
       (setq-local window-size-fixed t))
     win))

 (defun per-frame-$*-line--create-window-1 (&optional frame buf)
   (let (win)
     (with-selected-frame (or frame (selected-frame))
       (setq win
             (if per-frame-$*-line-display-type
                 (display-buffer-in-side-window
                  (or buf (current-buffer))
                  `((side . ,per-frame-$*-line-window-side)
                    (slot . ,per-frame-$*-line-window-slot)
                    (window-height . 1)))
               (split-window (frame-root-window) nil
                             (if (eq 'bottom per-frame-$*-line-window-side)
                                 'below 'above)))))
     win))

 (defun per-frame-$*-line--create-window (&optional frame)
   (let* (window-configuration-change-hook
          (buf (per-frame-$*-line--get-create-buffer))
          (win (per-frame-$*-line--create-window-1 frame buf)))
     (set-frame-parameter frame 'per-frame-$*-line-window win)
     (set-window-parameter win 'per-frame-$*-line-window t)
     (per-frame-$@-line--init-window-with-buffer win buf)))

 (defun per-frame-$*-line--get-create-window (&optional frame)
   (let ((win (frame-parameter frame 'per-frame-$*-line-window)))
     (unless (window-live-p win)
       (setq win (window-with-parameter 'per-frame-$*-line-window t frame)))
     (unless (window-live-p win)
       (setq win (per-frame-$*-line--create-window frame)))
     win))

 (defun per-frame-$*-line--kill-window (&optional frame win)
   (let ((win (or (and (window-live-p win) win)
                  (frame-parameter frame 'per-frame-$*-line-window)))
         (per-frame-$@-line--inhibit-delete-window-advice t))
     (when (window-live-p win)
       (delete-window win))
     (set-frame-parameter frame 'per-frame-$*-line-window nil)))


 (defun per-frame-$*-line--kill-display-function (display)
   (when display
     (let ((winc (assq 'win display))
           (bufc (assq 'buf display))
           (frame (cdr (assq 'frame display))))
       (per-frame-$*-line--kill-window frame (cdr winc))
       (per-frame-$*-line--kill-buffer (cdr bufc))
       (setcdr winc nil)
       (setcdr bufc nil)
       (set-frame-parameter frame 'per-frame-$*-line-display
                            nil)
       display)))

 (defun per-frame-$*-line--kill-display (display)
   (funcall per-frame-$*-line-kill-display-function display))

 (defun per-frame-$*-line--display-valid-p (display)
   (let ((win (cdr (assq 'win display)))
         (buf (cdr (assq 'buf display))))
     (and (window-live-p win) (buffer-live-p buf))))

 (defun per-frame-$*-line--get-create-display-function (&optional frame)
   (let ((display (frame-parameter frame 'per-frame-$*-line-display)))
     (if (per-frame-$*-line--display-valid-p display)
         display
       (let* ((buf (per-frame-$*-line--get-create-buffer))
              (win (per-frame-$*-line--get-create-window frame))
              (display (cons (cons 'buf buf)
                             (cons (cons 'win win)
                                   (cons (cons 'frame (or frame
                                                          (selected-frame)))
                                         nil)))))
         (set-frame-parameter frame 'per-frame-$*-line-display
                              display)
         display))))

 (defun per-frame-$*-line--get-create-display (&optional frame)
   (funcall per-frame-$*-line-get-create-display-function frame))

 (defun per-frame-$*-line--update-display-function (display)
   (let ((buf (cdr (assq 'buf display))))
     (with-current-buffer buf
       (setq-local buffer-read-only nil)
       (erase-buffer)
       (let* (($*-l-str
               (format-mode-line
                ($eval
                 (if (eq '$1 '$*)
                     `(list "" '(eldoc-$1-line-string
                                 (" " eldoc-$1-line-string " "))
                            (default-value '$1-line-format))
                   `(default-value '$*-line-format)))
                'per-frame-$*-line-face
                per-frame-$@-line--selected-window))
              ;; (win (cdr (assq 'win display)))
              ;; (win-w (window-width win))
              ;; (fill-w (max 0 (- win-w (string-width $*-l-str))))
              )
         (insert
          ;; (concat $*-l-str (propertize (make-string fill-w ?\ )
          ;;                              'face 'per-frame-$*-line-face))
          $*-l-str))
       ($subloop
        (setq-local $*-line-format nil))
       (goto-char (point-min))
       (setq-local buffer-read-only t))))

 (defun per-frame-$*-line--update-display (display)
   (funcall per-frame-$*-line-update-display-function display))

 (defun per-frame-$*-line--update ()
   (let* ((display (per-frame-$*-line--get-create-display))
          (win (cdr (assq 'win display)))
          (cwin (selected-window)))
     (unless (eq win cwin)
       (setq per-frame-$@-line--selected-window
             (if (eq (minibuffer-window) cwin)
                 (minibuffer-selected-window)
               cwin)))
     (per-frame-$*-line--update-display display)))

 (defun per-frame-$@-line--update ()
   ($subloop
    (when per-frame-$*-line-mode
      (per-frame-$*-line--update)))
   t)

 (defun per-frame-$*-line--display-buffer-p (b)
   (eq b per-frame-$*-line--buffer))

 (defun per-frame-$*-line--activate (&optional frames)
   (unless (listp frames) (setq frames (list frames)))
   (unless frames (setq frames
                        (if (and (fboundp 'daemonp) (daemonp))
                            (filtered-frame-list
                             #'(lambda (f)
                                 (and (frame-live-p f)
                                      (not (eq f terminal-frame)))))
                          (frame-list))))
   (dolist (frame frames)
     (per-frame-$*-line--get-create-display frame))

   (add-to-list 'window-persistent-parameters
                '(per-frame-$*-line-window . writable))
   (add-to-list 'window-persistent-parameters
                '(no-other-window . writable))

   (ad-activate #'delete-window)
   (common-$@-line-add-delayed-update-function
    #'per-frame-$@-line--update)
   (add-hook 'per-window-$@-line-ignore-buffer-functions
             #'per-frame-$*-line--display-buffer-p))

 (defun per-frame-$*-line--deactivate (&optional frames)
   (unless (listp frames) (setq frames (list frames)))
   (let (all-frames win all)
     (unless frames
       (setq frames (frame-list)
             all-frames t))
     (dolist (frame frames)
       (per-frame-$*-line--kill-display
        (frame-parameter frame 'per-frame-$*-line-display)))
     (unless (window-with-parameter 'per-frame-$*-line-window t)
       (setq all-frames t))
     (when all-frames
       (progn
         (unless (or per-frame-$0-line-mode per-frame-$1-line-mode)
           (ad-deactivate #'delete-window)
           (common-$@-line-rem-delayed-update-function
            #'per-frame-$@-line--update)
           (remove-hook 'per-window-$@-line-ignore-buffer-functions
                        #'per-frame-$*-line--display-buffer-p))))))

 (defun per-frame-$@-line--can-delete-window-p (win)
   (if (or per-frame-$0-line-mode per-frame-$1-line-mode)
       (not
        (or (window-parameter win 'per-frame-$0-line-window)
            (window-parameter win 'per-frame-$1-line-window)
            (< (length (window-list nil 0 win)) 3)))
     t))

 (defadvice delete-window
     (around per-frame-$@-line--delete-window-adv)
   (if (and
        (not per-frame-$@-line--inhibit-delete-window-advice)
        (not (per-frame-$@-line--can-delete-window-p
              (or (ad-get-arg 0)
                  (selected-window)))))
       nil
     ad-do-it))

 (:autoload
  (define-minor-mode per-frame-$*-line-mode
    "Toggle the per-frame-$*-line-mode.
When active it draws a $*-line at the bottom(or top) of
the frame."
    :require 'per-frame-$@-line
    :group   'per-frame-$@-line
    :init-value nil
    :global     t
    (if per-frame-$*-line-mode
        (per-frame-$*-line--activate)
      (per-frame-$*-line--deactivate))))

 (:autoload
  (define-minor-mode per-frame-$@-line-mode
    "Toggle per-frame-$0-line-mode and per-frame-$1-line-mode."
    :require 'per-frame-$@-line
    :group   'per-frame-$@-line
    :init-value nil
    :global     t
    (if per-frame-$@-line-mode
        ($subloop
         (per-frame-$*-line-mode 1))
      ($subloop
       (per-frame-$*-line-mode -1)))))

 (provide 'per-frame-$@-line)

 (:text
  "
;;; per-frame-$@-line.el ends here")
 )
